/*************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2015 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at 
 * https://bitbucket.org/sbacoss/eotds/wiki/AIR_Open_Source_License
 *************************************************************************/

package org.opentestsystem.delivery.studentreportprocessor;

import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import tds.dll.api.IReportingDLL;
import AIR.Common.DB.AbstractConnectionManager;
import AIR.Common.DB.SQLConnection;
import AIR.Common.DB.results.DbResultRecord;
import AIR.Common.DB.results.SingleDataResultSet;

/**
 * 
 * @author jmambo
 *
 */
public class StudentReportProcessor
{
  
  static ApplicationContext       _context   =  new ClassPathXmlApplicationContext (new String[] { "root-context.xml" });
  private static Logger           _logger    = LoggerFactory.getLogger (StudentReportProcessor.class);
  private IReportingDLL           _dll       = null;
  private AbstractConnectionManager _connectionManager = null;
  
  @Value("${studentReportProcessor.emptyResultWaitTime}")
  private long _emptyResultWaitTime;

  @Value("${studentReportProcessor.exceptiontWaitTime}")
  private long _exceptiontWaitTime;
  
  
  public static void main (String[] args)  {
    try {
      _logger.info ("Starting StudentReportProcessor");
       StudentReportProcessor studentReportProcessor = (StudentReportProcessor) _context.getBean ("studentReportProcessor");
       studentReportProcessor.process ();
      _logger.info ("Finished StudentReportProcessor");
    } catch (Exception e) {
      _logger.error (e.getMessage ());
      throw new RuntimeException (e);
    }
  }

  public void process () throws Exception  {
    _dll = (IReportingDLL) _context.getBean ("iReportingDLL");
    _connectionManager = (AbstractConnectionManager) _context.getBean ("abstractConnectionManager");
    while (true) {
      try (SQLConnection connection = _connectionManager.getConnection ()) {
        while (true) {
          SingleDataResultSet result = _dll.readQaReportQueue (connection);
          if (result != null) {
            DbResultRecord rec = (result.getCount() > 0 ? result.getRecords().next() : null);
            if (rec != null) {
              UUID oppkey = rec.<UUID> get ("testopp");
              Long key = rec.<Long> get ("_key");
              String changeStatus = rec.<String> get ("changestatus");
              _dll.QA_SendXML (connection, oppkey, changeStatus);
              _dll.deleteQaReportQueue (connection, key);
            } else {
              Thread.sleep (_emptyResultWaitTime * 1000); 
            }
          }
        }
      } catch (Exception e) {
        _logger.error (e.getMessage (), e);
      }
      Thread.sleep (_exceptiontWaitTime * 1000);
    }
  }

}
